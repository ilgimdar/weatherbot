import urllib

import requests
import telebot
from bs4 import BeautifulSoup
from geopy.geocoders import Nominatim
from telebot import types
from translate import Translator

import config
from db import BotDB

bot = telebot.TeleBot(config.TOKEN)
url = config.url
geolocator = Nominatim(user_agent="superWheatherBot")
BotDB = BotDB('static/accountant.db')
translator = Translator(to_lang='en', from_lang='ru')
s = requests.Session()


@bot.message_handler(commands=['start'])
def welcome(message):
    stick = open('static/AnimatedSticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, stick)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
    item2 = types.KeyboardButton('–ö–∞–∫ –¥–µ–ª–∞?')
    markup.add(item1, item2)
    if not BotDB.user_exists(message.chat.id):
        BotDB.add_user(message.from_user.id)
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –ö–æ–Ω–µ—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–µ –±–µ–∑ –ø–æ–º–æ—â–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –Ω–æ —ç—Ç–æ —É–∂–µ –º–µ–ª–æ—á–∏".format(
                             message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         "–û–≥–æ-–≥–æ! –ü—Ä–∏–≤–µ—Ç, {0.first_name}! –î–∞ —è —Ç–µ–±—è –∑–Ω–∞—é! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, –¥—Ä—É–∂–∏—â–µ! –•–æ—á–µ—à—å —Å–Ω–æ–≤–∞ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?".format(
                             message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
        city_data = BotDB.get_city(message.chat.id)
        if city_data != []:
            city = str(city_data[0][0])
            bot.send_message(message.chat.id,
                             "–Ø –¥–∞–∂–µ –ø–æ–º–Ω—é, –≥–¥–µ —Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É. –≠—Ç–æ –±—ã–ª " + city + " –°–µ–π—á–∞—Å –≥–ª—è–Ω—É, –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞")
            search_weather(message, city)
        else:
            bot.send_message(message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–º–Ω—é, –æ—Ç–∫—É–¥–∞ —Ç—ã, –∏–∑–≤–∏–Ω–∏ =)")


@bot.message_handler(content_types=['text'])
def message_handler(message):
    if message.chat.type == 'private':
        if message.text == '–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É':
            city_data = BotDB.get_city(message.chat.id)
            if city_data != []:
                city = str(city_data[0][0])
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('–î–∞, –º–Ω–µ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
                item2 = types.KeyboardButton('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ.')
                markup.add(item1, item2)
                bot.send_message(message.chat.id,
                                 "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º. –í–µ—Ä–Ω—É–ª –≤—Å—ë –Ω–∞–∑–∞–¥", reply_markup=markup)
                bot.send_message(message.chat.id,
                                 "–¢–∞–∫-—Ç–∞–∫, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Ç—ã —É–∑–Ω–∞–≤–∞–ª –ø–æ–≥–æ–¥—É –≤ " + city + ". –°–µ–π—á–∞—Å –≥–ª—è–Ω—É, –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≥–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ?")
                search_weather(message, city)
            else:
                bot.send_message(message.chat.id,
                                 "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–º–Ω—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–µ, –∏–∑–≤–∏–Ω–∏ =)")
                bot.send_message(message.chat.id,
                                 "–ì–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É? –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
                back_button = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥')
                keyboard.add(button_geo, back_button)
                bot.send_message(message.chat.id, "–ü–æ–¥–µ–ª–∏—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", reply_markup=keyboard)
        elif message.text == '–ö–∞–∫ –¥–µ–ª–∞?':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton('–•–æ—Ä–æ—à–æ', callback_data='good')
            item2 = types.InlineKeyboardButton('–ù—É —Ç–∞–∫–æ–µ', callback_data='bad')

            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–í—Å–µ —Å—É–ø–µ—Ä! –ê —É —Ç–µ–±—è?', reply_markup=markup)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥' or message.text == '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ.':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
            item2 = types.KeyboardButton('–ö–∞–∫ –¥–µ–ª–∞?')
            markup.add(item1, item2)
            bot.send_message(message.chat.id,
                             "–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        elif message.text == '–î–∞, –º–Ω–µ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.':
            bot.send_message(message.chat.id,
                             "–ù–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ. –ì–¥–µ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑? –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
            back_button = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥')
            keyboard.add(button_geo, back_button)
            bot.send_message(message.chat.id, "–ü–æ–¥–µ–ª–∏—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", reply_markup=keyboard)
        else:
            search_weather(message, '')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data == 'good':
            bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ')
        elif call.data == 'bad':
            bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç...')

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üì®',
                              reply_markup=None)

        # bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    except Exception as e:
        print(repr(e))


@bot.message_handler(content_types=['location'])
def location(message):
    if message.location is not None:
        st = str(message.location)
        st = st[st.find(':') + 2:]
        long = st[:st.find(',')]
        st = st[st.find(':') + 2:]
        lat = st[:st.find(',')]
        address = float(lat), float(long)
        location = geolocator.reverse(address)
        address = location.raw['address']
        city = address.get('city', '')
        print(city)
        search_weather(message, city)


def get_html(url, plus):
    global s
    headers = {
        'x-user-agent': "desktop",
        'x-proxy-location': "US",
        'x-rapidapi-host': "google-search3.p.rapidapi.com",
        'x-rapidapi-key': "5611131226msh9e78db53f476b4ep15a23bjsn7498bda906eb"
    }
    addlink = cyr_to_google('–ø–æ–≥–æ–¥–∞') + '+' + cyr_to_google('–≤') + '+' + cyr_to_google(
        plus)
    print(url + addlink)
    req = s.get(url + addlink, headers=headers)

    soup = BeautifulSoup(req.text, 'html.parser')
    return soup


def get_wheather(city):
    global url
    output = get_html(url, city)
    temp = get_temp(output)
    message = 'üåÜ –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ' + city + ' \n'
    message += '‚õÖ –í —Ü–µ–ª–æ–º: ' + temp[2] + '\n'
    message += 'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + temp[0] + '\n'
    message += '‚úÖ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ' + temp[1] + '\n'
    message += 'üå™Ô∏è –í–µ—Ç–µ—Ä: ' + temp[2] + '\n'
    return message


def get_temp(html_text):
    info = str(html_text)
    print('find:')
    if info.find("https://www.gismeteo.ru/weather-") != -1:
        info = info[info.find("https://www.gismeteo.ru/weather-"):]
        gismeteo_url = info[:info.find('"')]
    else:
        info = info[info.find("https://www.gismeteo.com/weather-"):]
        gismeteo_url = info[:info.find('"')]
        gismeteo_url = gismeteo_url.replace('.com', '.ru', 1)
    print(gismeteo_url)
    answer = get_gismeteo(gismeteo_url)
    return answer


def search_weather(message, alt):
    try:
        if alt == '':
            alt = message.text
        if BotDB.get_city(message.chat.id) == []:
            BotDB.add_city(message.chat.id, alt)
        else:
            BotDB.set_city(message.chat.id, alt)
        m_to_send = get_wheather(alt)
        bot.send_message(message.chat.id, m_to_send)
        photo_urls = get_photo_url(alt)
        f = open('out.jpg', 'wb')
        try:
            img_data = requests.get(photo_urls[0]).content
            with open('out.jpg', 'wb') as handler:
                handler.write(img_data)
            bot.send_photo(message.chat.id, img_data)
        except Exception as e:
            print(e)
            f.write(urllib.request.urlopen(photo_urls[1]).read())
            f.close()
            img = open('out.jpg', 'rb')
            bot.send_photo(message.chat.id, img)
            img.close()
        return
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–≥–æ–¥—É —É–∑–Ω–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return


def cyr_to_google(text):
    ans = str(text.encode('utf-8'))[2:-1]
    ans1 = ''
    i = 0
    while i < len(ans):
        if ord(ans[i]) == 92:
            ans1 += '%'
            i += 1
        elif ans[i] == '-' or ans[i] == ',' or ans[i] == ' ':
            ans1 += '+'
        else:
            ans1 += ans[i]
        i += 1
    return ans1.upper()


def get_gismeteo(url):
    global s
    if '/weekly' in url:
        url = url[:url.find('/weekly')]
        url += '/'
    if '/10-days' in url:
        url = url[:url.find('/10-days')]
        url += '/'
    url += 'now'
    print(url)
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
    req = s.get(url, headers=headers)
    soup = BeautifulSoup(req.text, 'html.parser')
    return get_now_info(soup)


def get_now_info(soup):
    spans = soup.find('div', {'class': 'weather-value'})
    span1 = spans.find('span')
    w_feel = soup.find('div', {'class': 'weather-feel'})
    feel_c = w_feel.find('span', {'class': 'unit_temperature_c'})
    sky = soup.find('div', {'class': 'now-desc'})
    wind = soup.find('div', {'class': 'now-info-item wind'})
    ans = [span1.text + '¬∞C', feel_c.text + '¬∞C', sky.text, wind.text]
    return ans


def get_photo_url(city):
    url_new = 'https://yandex.ru/images/search?text=' + cyr_to_google(city) + '&family=yes'
    print(url_new)
    response = requests.get(url_new)
    soup = BeautifulSoup(response.text, 'html.parser')
    text_second = str(soup.find('div', {'class': 'serp-item_pos_1'}))
    text_first = str(soup.find('div', {'class': 'serp-item_pos_0'}))
    text_first = text_first[:text_first.find('.jpg') + 5]
    text_second = text_second[text_second.find('url') + 3:]
    text_first = text_first[text_first.rfind('url') + 6:]
    text_second = text_second[text_second.find('url') + 6:]
    text_first = text_first[:text_first.find('"')]
    text_second = text_second[:text_second.find('"')]
    print(text_first, text_second)
    return [text_first, text_second]


bot.polling(none_stop=True)
